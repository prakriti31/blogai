<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Recommended for You</title>
    <link rel="stylesheet" href="/css/home-style.css" />
    <link rel="stylesheet" href="/css/recommendation.css" />
    <script src="https://kit.fontawesome.com/eabac940d1.js" crossorigin="anonymous"></script>
</head>
<body>
<nav>…</nav>

<main class="recommendations-container">
    <section id="restaurants"    class="section"><h2>Restaurants</h2>     <div class="cards-container"></div></section>
    <section id="musicalEvents"  class="section"><h2>Musical Events</h2> <div class="cards-container"></div></section>
    <section id="sportsEvents"   class="section"><h2>Sports Events</h2>  <div class="cards-container"></div></section>

    <section class="section"><button id="showMapBtn" class="show-map-btn">Show on Map</button></section>

    <section id="mapSection" class="section" style="display:none;">
        <h2>Map</h2><div class="cards-container"><div id="map" class="card" style="width:100%;height:600px;"></div></div>
    </section>
</main>

<!--  Google Maps  -->
<script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBx0nujpBSNOmBAMd3YxVlUidNSX6titLg&callback=initMap">
</script>

<script>
    let userPosition  = null;
    let recommendations = null;
    let map, bounds, geocoder, infoWin;
    let mapInitialised = false;

    /* ------------------------------ bootstrap ------------------------------ */
    document.addEventListener('DOMContentLoaded', () => {
        if (!navigator.geolocation) { alert('Geolocation not supported'); return; }

        navigator.geolocation.getCurrentPosition(async ({ coords }) => {
            const { latitude, longitude } = coords;
            userPosition = { lat: latitude, lng: longitude };

            /* fetch weather */
            const wRes    = await fetch(`https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&current_weather=true`);
            const weather = (await wRes.json()).current_weather;

            /* fetch recs */
            const rRes = await fetch('/api/recommendations', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ location: `${latitude},${longitude}`, weather })
            });
            if (!rRes.ok) return console.error('Recommendations API error', rRes.status);

            const payload = await rRes.json();
            recommendations = typeof payload.recommendations === 'string'
                ? JSON.parse(payload.recommendations.replace(/```json|```/g,'').trim())
                : payload.recommendations;

            renderCards('restaurants',   recommendations.restaurants,   weather);
            renderCards('musicalEvents', recommendations.musicalEvents, weather);
            renderCards('sportsEvents',  recommendations.sportsEvents,  weather);
        });

        /* Map toggle */
        document.getElementById('showMapBtn').addEventListener('click', () => {
            const mapSection = document.getElementById('mapSection');
            mapSection.style.display = 'block';
            if (!mapInitialised && window.google?.maps) { initMap(); mapInitialised = true; }
            window.scrollTo({ top: mapSection.offsetTop - 60, behavior: 'smooth' });
        });
    });

    /* ---------------------------- card renderer ---------------------------- */
    function renderCards(sectionId, items, weather) {
        const container = document.querySelector(`#${sectionId} .cards-container`);
        container.innerHTML = '';
        if (!Array.isArray(items)) return;

        items.forEach(item => {
            const isEvent = sectionId !== 'restaurants';

            /* timeline block — now prefers live hoursText if present */
            let timeHTML = '';
            if (sectionId === 'restaurants') {
                if (item.openingTime && item.closingTime) {
                    timeHTML = `<p><strong>Open:</strong> ${item.openingTime} – ${item.closingTime}</p>`;
                } else if (item.hoursText) {
                    timeHTML = `<p><strong>Hours:</strong> ${item.hoursText}</p>`;
                } else {
                    timeHTML = `<p><em>No hours on Google – Please call the venue.</em></p>`;
                }
            } else {
                timeHTML = `<p><strong>Start:</strong> ${item.date} @ ${item.startTime}</p>`;
            }

            const weatherHTML = isEvent
                ? `<p><strong>Forecast:</strong> ${item.temperature}, ${item.weatherForecast}</p>`
                : `<p><strong>Current Weather:</strong> ${weather.temperature}°C</p>`;

            const extras = sectionId === 'restaurants'
                ? `<p><strong>Cuisine:</strong> ${item.cuisineType}</p>
         <p><strong>Best Dishes:</strong> ${item.bestDishes || ''}</p>`
                : '';

            const card = document.createElement('div');
            card.className = 'card';
            card.innerHTML = `
      <h3>${item.name || item.eventName}</h3>
      <p>${item.address || item.venue}</p>
      ${timeHTML}
      ${weatherHTML}
      ${extras}`;
            container.appendChild(card);
        });
    }

    /* ------------------------------ maps logic ----------------------------- */
    function initMap() {
        if (!userPosition) return;

        bounds   = new google.maps.LatLngBounds();
        geocoder = new google.maps.Geocoder();
        infoWin  = new google.maps.InfoWindow();

        map = new google.maps.Map(document.getElementById('map'), {
            center: userPosition,
            zoom:   13,
            mapTypeControl: false
        });

        makeMarker({
            latLng: userPosition,
            icon: 'https://maps.google.com/mapfiles/kml/paddle/grn-circle.png',
            title: 'Your location',
            html: '<strong>You are here</strong>'
        });

        const icons = {
            restaurant: 'https://maps.google.com/mapfiles/kml/paddle/red-circle.png',
            music: 'https://maps.google.com/mapfiles/kml/paddle/blu-circle.png',
            sports: 'https://maps.google.com/mapfiles/kml/paddle/ylw-circle.png'
        };

        const all = [
            ...recommendations.restaurants.map(r => ({
                address: r.address + ', Chicago, IL, USA',
                icon: icons.restaurant,
                title: r.name,
                html: `<strong>${r.name}</strong><br>${r.address}<br>${r.cuisineType}<br>${r.bestDishes || ''}`
            })),
            ...recommendations.musicalEvents.map(e => ({
                address: e.venue + ', Chicago, IL, USA',
                icon: icons.music,
                title: e.eventName,
                html: `<strong>${e.eventName}</strong><br>${e.venue}<br>${e.date} @ ${e.startTime}<br>${e.temperature}, ${e.weatherForecast}`
            })),
            ...recommendations.sportsEvents.map(e => ({
                address: e.venue + ', Chicago, IL, USA',
                icon: icons.sports,
                title: e.eventName,
                html: `<strong>${e.eventName}</strong><br>${e.venue}<br>${e.date} @ ${e.startTime}<br>${e.temperature}, ${e.weatherForecast}`
            }))
        ];

        all.forEach((obj, idx) => {
            setTimeout(() => geocoder.geocode({ address: obj.address },
                (res, status) => {
                    if (status !== 'OK' || !res[0]) return console.warn('Geocode fail', obj.address);
                    const loc = res[0].geometry.location;
                    const jitter = 0.0003;
                    const pos = {
                        lat: loc.lat() + (Math.random() - 0.5) * jitter,
                        lng: loc.lng() + (Math.random() - 0.5) * jitter
                    };
                    makeMarker({ latLng: pos, ...obj });
                }), idx * 500);
        });
    }

    function makeMarker({ latLng, icon, title, html }) {
        const m = new google.maps.Marker({ position: latLng, map, icon, title });
        bounds.extend(latLng);
        map.fitBounds(bounds);

        m.addListener('mouseover', () => {
            infoWin.setContent(html);
            infoWin.open(map, m);
        });
        m.addListener('click', () => {
            infoWin.setContent(html);
            infoWin.open(map, m);
            window.open(`https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(title)}`, '_blank');
        });
}
</script>
</body>
</html>
