<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Recommended for You</title>
    <link rel="stylesheet" href="/css/home-style.css" />
    <link rel="stylesheet" href="/css/recommendation.css" />
    <script src="https://kit.fontawesome.com/eabac940d1.js" crossorigin="anonymous"></script>
</head>
<body>
<nav>…</nav>

<main class="recommendations-container">
    <section id="restaurants" class="section">
        <h2>Restaurants</h2>
        <div class="cards-container"></div>
    </section>
    <section id="musicalEvents" class="section">
        <h2>Musical Events</h2>
        <div class="cards-container"></div>
    </section>
    <section id="sportsEvents" class="section">
        <h2>Sports Events</h2>
        <div class="cards-container"></div>
    </section>
</main>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        if (!navigator.geolocation) {
            alert('Geolocation not supported');
            return;
        }

        navigator.geolocation.getCurrentPosition(async ({ coords }) => {
            const { latitude, longitude } = coords;

            // 1) Fetch current weather
            const weatherRes = await fetch(
                `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&current_weather=true`
            );
            const weatherData = await weatherRes.json();
            const weather = weatherData.current_weather;

            // 2) Fetch recommendations from your backend
            const recRes = await fetch('/api/recommendations', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ location: `${latitude},${longitude}`, weather })
            });
            if (!recRes.ok) {
                console.error('Recommendations API error', recRes.status);
                return;
            }

            // 3) Parse payload (handle stringified JSON)
            const payload = await recRes.json();
            let recommendations = payload.recommendations;
            if (typeof recommendations === 'string') {
                recommendations = JSON.parse(
                    recommendations.replace(/```json|```/g, '').trim()
                );
            }

            // 4) Render each section
            renderCards('restaurants',    recommendations.restaurants,    weather);
            renderCards('musicalEvents', recommendations.musicalEvents, weather);
            renderCards('sportsEvents',   recommendations.sportsEvents,   weather);
        }, err => console.error('Geolocation error', err));
    });

    function renderCards(sectionId, items, weather) {
        const container = document.querySelector(`#${sectionId} .cards-container`);
        container.innerHTML = '';  // clear old cards

        if (!Array.isArray(items)) return;

        items.forEach(item => {
            const isEvent = sectionId === 'musicalEvents' || sectionId === 'sportsEvents';

            // Weather line
            const weatherHTML = isEvent
                ? `<p class="weather"><strong>Forecast:</strong> ${item.temperature}, ${item.weatherForecast}</p>`
                : `<p class="weather"><strong>Current Weather:</strong> ${weather.temperature}°C</p>`;

            // Opening vs. start time
            const timeLine = item.openingTime
                ? `<p><strong>Open:</strong> ${item.openingTime} - ${item.closingTime}</p>`
                : `<p><strong>Start:</strong> ${item.date} @ ${item.startTime}</p>`;

            // Location (for events)
            const locationLine = item.location
                ? `<p><strong>Location:</strong> ${item.location}</p>`
                : '';

            // Restaurant‐only lines
            const cuisineLine    = sectionId === 'restaurants'
                ? `<p><strong>Cuisine:</strong> ${item.cuisineType}</p>`
                : '';
            const bestDishesLine = sectionId === 'restaurants'
                ? `<p><strong>Best Dishes:</strong> ${item.bestDishes}</p>`
                : '';

            const card = document.createElement('div');
            card.className = 'card';
            card.innerHTML = `
          <h3>${item.name || item.eventName}</h3>
          <p>${item.address || item.venue}</p>
          ${locationLine}
          ${timeLine}
          ${weatherHTML}
          ${cuisineLine}
        `;
            container.appendChild(card);
        });
    }
</script>
</body>
</html>
